name: Azure Pipelines
variables:
  python.version: '3.7.6'

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: Ubuntu-18.04
    steps:
    - task: TerraformInstaller@0
      displayName: 'Terraform install'
      inputs:
        terraformVersion: 'latest'
    - task: DownloadSecureFile@1
      displayName: "Download secure file"
      name: mySSH
      inputs:
        secureFile: 'id_rsa.pub'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          mkdir -p ~/.ssh
          cp $(mySSH.secureFilePath)  ~/.ssh
  # Needed for Terraform VM deployment
#    - task: InstallSSHKey@0
#      inputs:
#        knownHostsEntry: 'KNOWN_HOSTS_STRING'
#        sshPublicKey: 'PUBLIC_KEY'
#        sshKeySecureFile: 'id_rsa'
    - task: TerraformTaskV2@2
      displayName: 'Terraform init'
      inputs:
        provider: 'azurerm'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        command: 'init'
        backendServiceArm: 'Azure subscription 1(4d999104-b7c3-451d-b8d4-3d38b64ef19c)'
        backendAzureRmResourceGroupName: 'tfstate'
        backendAzureRmStorageAccountName: 'tfstate17655'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'EuwEzS0FZoFSE+RUceuoxqE1Vq2m8MohDCVYfO5YZTBb8sFyWs4Ze2LYpSWZB0aLv5R7HHaZHzLL1qQxBt9QKg=='
    - task: TerraformTaskV2@2
      displayName: 'Terraform validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
    - task: TerraformTaskV2@2
      displayName: 'Terraform plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        environmentServiceNameAzureRM: 'terraform_conn'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    - task: TerraformTaskV2@2
      displayName: 'Terraform apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        environmentServiceNameAzureRM: 'Azure subscription 1(4d999104-b7c3-451d-b8d4-3d38b64ef19c)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    - task: Bash@3
      displayName: 'Install Newman dependencies'
      inputs:
        targetType: 'inline'
        script: |
          sudo npm install -g newman
          sudo npm install -g newman-reporter-junitfull
    - task: Bash@3
      displayName: 'Run regression tests'
      inputs:
        targetType: 'inline'
        script: 'newman run "$(System.DefaultWorkingDirectory)/automatedtesting/postman/Regression_Tests_Postman.postman_collection.json" -e "$(System.DefaultWorkingDirectory)/automatedtesting/postman/project_3_postman.postman_environment.json" -r cli,junitfull --reporter-junitfull-export $(System.DefaultWorkingDirectory)/automatedtesting/postman/result-regression-test.xml'
    - task: Bash@3
      displayName: 'Run data validation tests'
      inputs:
        targetType: 'inline'
        script: 'newman run "$(System.DefaultWorkingDirectory)/automatedtesting/postman/Data_Validation_Tests_Postman.postman_collection.json" -e "$(System.DefaultWorkingDirectory)/automatedtesting/postman/project_3_postman.postman_environment.json" -r cli,junitfull --reporter-junitfull-export $(System.DefaultWorkingDirectory)/automatedtesting/postman/result-data-validation-test.xml'
    - task: PublishTestResults@2
      displayName: 'Post Postman regression and data validation tests'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/*test.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
        mergeTestResults: true
        failTaskOnFailedTests: true
        testRunTitle: 'Regression and data validation graphs'
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
    - publish: automatedtesting/selenium/login.py
      displayName: 'Upload Package'
      artifact: drop-selenium-test

- stage: Deploy
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-18.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'Azure subscription 1(4d999104-b7c3-451d-b8d4-3d38b64ef19c)'
              appName: 'myApplicationProject3-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  - deployment: VMDeploy
    displayName: Virtual Machine deployment
    environment:
      name:  myEnvironment
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            displayName: 'Download Selenium'
            artifact: drop-selenium-test
          - task: Bash@3
            displayName: 'Install Selenium dependencies'
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                sudo apt-get update
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip unzip expect -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                sudo apt-get install -y chromium-chromedriver
                pip3 install selenium

          - task: Bash@3
            displayName: 'Run Selenium tests'
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                cd $(Pipeline.Workspace)/drop-selenium-test
                python3 login.py

- stage: Test
  jobs:
    - job: Jmeter_Performance_Tests
      displayName: 'Jmeter Performance testing'
      pool:
        vmImage: Ubuntu-18.04
        steps:
        - task: JMeterInstaller@0
          displayName: 'Install JMeter 5.4.1'
          inputs:
            jmeterVersion: 5.4.1
        - task: Bash@3
          displayName: 'Stress tests'
          inputs:
            targetType: 'inline'
            script: |
              mkdir -p output_reports
              jmeter -n -t Stress_test_suite.jmx -l stress-test-results.jtl -e -f -o stress-test-report
        - task: PublishBuildArtifact@1
          displayName: 'Publish output report of stress tests'
          inputs:
            ArtifactName: 'stress-test-report'
            PathtoPublish: '$(Build.SourcesDirectory)/stress-test-report'
        - task: Bash@3
          displayName: 'Endurance tests'
          inputs:
            targetType: 'inline'
            script: |
              mkdir -p output_reports
              jmeter -n -t Endurance_test_suite.jmx -l endurance-test-results.jtl -e -f -o endurance-test-report
        - task: PublishBuildArtifact@1
          displayName: 'Publish output report of endurance tests'
          inputs:
            ArtifactName: 'endurance-test-report'
            PathtoPublish: '$(Build.SourcesDirectory)/endurance-test-report'
